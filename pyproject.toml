[tool.poetry]
name = "sqlecto"
version = "0.1.0"
description = ""
authors = ["Valdas Čereška <valdasync@proton.me>"]
readme = "README.md"
license = "MIT"
repository = "https://github.com/valdAsync/sqlecto"

[tool.poetry.scripts]
sqlecto = "sqlecto.main:app"

[tool.poetry.dependencies]
python = "^3.8"
sqlglot = "^25.20.1"
pytest = "^8.3.3"
typer = "^0.12.5"
pyyaml = "^6.0.2"

[tool.poetry.group.dev.dependencies]
pre-commit = ">=2.10"
ruff = "^0.6.4"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
fix = true
line-length = 88
target-version = "py39"
extend-exclude = ["docs/*", "tests/fixtures/*"]

[tool.ruff.lint]
extend-select = [
  "B",   # flake8-bugbear
  "C4",  # flake8-comprehensions
  "ERA", # flake8-eradicate/eradicate
  "I",   # isort
  "N",   # pep8-naming
  "PIE", # flake8-pie
  "PGH", # pygrep
  "RUF", # ruff checks
  "SIM", # flake8-simplify
  "T20", # flake8-print
  "TCH", # flake8-type-checking
  "TID", # flake8-tidy-imports
  "UP",  # pyupgrade
]
ignore = [
  "B904", # Use 'raise ... from err'
  "B905", # Use explicit 'strict=' parameter with 'zip()'
  "N818", # Exception name should be named with an Error suffix
]
extend-safe-fixes = [
  "TCH", # Move import from and to TYPE_CHECKING blocks
]
unfixable = [
  "ERA", # Do not autoremove commented out code
]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.isort]
force-single-line = true
lines-between-types = 1
lines-after-imports = 2
known-first-party = ["sqlecto"]
known-third-party = ["sqlglot", "click"]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
